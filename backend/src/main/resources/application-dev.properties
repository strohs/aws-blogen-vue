logging.level.com.cliff.aws.blogen=debug

# This controls if AWS resources should be created and then bootstrapped with dummy data.
# It will create a cognito user pool, cognito identity pool, and a DynamoDB table.
# The resources will be deleted once this application is stopped
blogen.bootstrap.data=true

# If true this will delete and then recreate the blogen dynamoDB table when this application starts up.
# If false, the table will not be created. It is assumed that the blogen dynamoDB table already exists
blogen.recreate.table.if.exists=true

# You can override your AWS accessKey and secretKey here.
# If you do so, they will override AWS's default credential provider chain.
# The default AWS credential provider chain will be searched in this order:
#
#  1. Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (RECOMMENDED since they are recognized by all
#     the AWS SDKs and CLI except for .NET), or AWS_ACCESS_KEY and AWS_SECRET_KEY (only recognized by Java SDK)
#  2. Java System Properties aws.accessKeyId and aws.secretKey
#  3. Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI
#  4. Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI"
#     environment variable is set and security manager has permission to access the variable,
#  5. Instance profile credentials delivered through the Amazon EC2 metadata service
aws.accesskey=
aws.secretkey=

# during development, set the embedded tomcat port to 8088 so that it doesn't conflict with
# any dev servers running on Node.js, typically they run on port 8080
server.port=8088
