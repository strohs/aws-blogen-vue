
# should sample data be loaded into the blogen table each time this application is started. Note that if you set
#  the property blogen.recreate.table.if.exists equal to false, you could get duplicate sample data loaded into the table
blogen.bootstrap.data=true

# Must set the ID's of the AWS Cognito User Pool and Identity Pool so spring can verify Cognito Tokens
blogen.security.jwt.aws.userPoolId=us-east-1_
blogen.security.jwt.aws.identityPoolId=us-east-1:
blogen.security.jwt.aws.region=us-east-1

# if true this will delete and then recreate the blogen dynamoDB table when this application starts up.
# if false, the table will not be created and it is assumed the the blogen dynamoDB table already exists
blogen.recreate.table.if.exists=true

# AWS credentials for accessing dynamoDB, the access key and secret key defined in this file will allow you to override
# the default AWS credential provider chain.
#  The default AWS credential provider chain will be searched in this order:
#
#  Environment Variables - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY (RECOMMENDED since they are recognized by all
#                          the AWS SDKs and CLI except for .NET), or AWS_ACCESS_KEY and AWS_SECRET_KEY
#                          (only recognized by Java SDK)
#  Java System Properties - aws.accessKeyId and aws.secretKey
#  Credential profiles file at the default location (~/.aws/credentials) shared by all AWS SDKs and the AWS CLI
#  Credentials delivered through the Amazon EC2 container service if AWS_CONTAINER_CREDENTIALS_RELATIVE_URI"
#     environment variable is set and security manager has permission to access the variable,
#  Instance profile credentials delivered through the Amazon EC2 metadata service
aws.accesskey=yourAccessKey
aws.secretkey=yourSecretKey

# during development, set the embedded tomcat port to 8088 so that it doesn't conflict with the npm dev server
server.port=8088
